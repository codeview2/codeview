####$$$$ yasnippet-snippets-master\c++-mode/.yas-parents
cc-mode
####$$$$ yasnippet-snippets-master\c++-mode/assert
# -*- mode: snippet -*-
# name: assert
# key: ass
# --
assert($0);####$$$$ yasnippet-snippets-master\c++-mode/beginend
# -*- mode: snippet -*-
# name : v.begin(), v.end()
# key: beginend
# --
${1:v}.begin(), $1.end####$$$$ yasnippet-snippets-master\c++-mode/boost_require
# -*- mode: snippet -*-
# name: boost_require
# key: req
# group: boost
# --
BOOST_REQUIRE( ${1:condition} );
$0####$$$$ yasnippet-snippets-master\c++-mode/cerr
# -*- mode: snippet -*-
# name: cerr
# key: err
# --
cerr << $0;
####$$$$ yasnippet-snippets-master\c++-mode/cin
# -*- mode: snippet -*-
# name: cin
# key: cin
# --
cin >> $0;####$$$$ yasnippet-snippets-master\c++-mode/class
# -*- mode: snippet -*-
# name: class
# key: cls
# --
class ${1:Name}
{
public:
    ${1:$(yas/substr yas-text "[^: ]*")}();
    ${2:virtual ~${1:$(yas/substr yas-text "[^: ]*")}();}
};
$0####$$$$ yasnippet-snippets-master\c++-mode/constructor
# -*- mode: snippet -*-
# name: constructor
# key: ct
# --
${1:Class}::$1(${2:args}) ${3: : ${4:init}}
{
        $0
}####$$$$ yasnippet-snippets-master\c++-mode/const_[]
# -*- mode: snippet -*-
# name: const_[]
# key: c[
# --
const ${1:Type}& operator[](${2:int index}) const
{
        $0
}####$$$$ yasnippet-snippets-master\c++-mode/cout
# -*- mode: snippet -*-
# contributor: York Zhao <gtdplatform@gmail.com>
# name: cout
# key: cout
# --
`(progn (save-excursion) (goto-char (point-min)) (unless (re-search-forward
"^using\\s-+namespace std;" nil 'no-errer) "std::"))
`cout << $0${1: << '${2:\n}'};####$$$$ yasnippet-snippets-master\c++-mode/cpp
# -*- mode: snippet -*-
# name: cpp
# key: cpp
# --
#include "`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`.h"####$$$$ yasnippet-snippets-master\c++-mode/cstd
# -*- mode: snippet -*-
# name: cstd
# key: cstd
# --
#include <cstdlib>####$$$$ yasnippet-snippets-master\c++-mode/d+=
# -*- mode: snippet -*-
# name: d+=
# key: d+=
# --
${1:MyClass}& operator+=(${2:const $1 &});####$$$$ yasnippet-snippets-master\c++-mode/delete
# -*- mode: snippet -*-
# name: delete
# key: dl
# --
delete ${1:pointer};####$$$$ yasnippet-snippets-master\c++-mode/delete[]
# -*- mode: snippet -*-
# name: delete[]
# key: dla
# --
delete[] ${1:arr};####$$$$ yasnippet-snippets-master\c++-mode/doc
# -*- mode: snippet -*-
# name: doc
# key: doc
# --
/**
 * $0
 */####$$$$ yasnippet-snippets-master\c++-mode/dynamic_casting
# -*- mode: snippet -*-
# name: dynamic_casting
# key: cast
# --
check_and_cast<${1:Type} *>(${2:msg});####$$$$ yasnippet-snippets-master\c++-mode/d_operator
# -*- mode: snippet -*-
# name: d_operator<<
# key: <<
# --
friend std::ostream& operator<<(std::ostream&, const ${1:Class}&);####$$$$ yasnippet-snippets-master\c++-mode/d_operator[]
# -*- mode: snippet -*-
# name: d_operator[]
# key: [
# --
${1:Type}& operator[](${2:int index});####$$$$ yasnippet-snippets-master\c++-mode/d_operator[]_const
# -*- mode: snippet -*-
# name: d_operator[]_const
# key: c[
# --
const ${1:Type}& operator[](${2:int index}) const;####$$$$ yasnippet-snippets-master\c++-mode/d_operator_istream
# -*- mode: snippet -*-
# name: d_operator>>
# key: >>
# --
friend std::istream& operator>>(std::istream&, const ${1:Class}&);####$$$$ yasnippet-snippets-master\c++-mode/d_operator_ostream
# -*- mode: snippet -*-
# name: d_operator<<
# key: <<
# --
friend std::ostream& operator<<(std::ostream&, const ${1:Class}&);####$$$$ yasnippet-snippets-master\c++-mode/enum
# -*- mode: snippet -*-
# name: enum
# key: enum
# --
enum ${1:NAME}{
$0
};####$$$$ yasnippet-snippets-master\c++-mode/fixture
# -*- mode: snippet -*-
# name: fixture
# key: fixt
# --
BOOST_FIXTURE_TEST_SUITE( ${1:name}, ${2:Fixture} )

$0

BOOST_AUTO_TEST_SUITE_END()####$$$$ yasnippet-snippets-master\c++-mode/fori
# -*- mode: snippet -*-
# name: fori
# key: fori
# --
for (${1:auto }${2:it} = ${3:var}.begin(); $2 != $3.end(); ++$2) {
    $0
}####$$$$ yasnippet-snippets-master\c++-mode/friend
# -*- mode: snippet -*-
# name: friend
# key: fr
# --
friend $0;####$$$$ yasnippet-snippets-master\c++-mode/function
# -*- mode: snippet -*-
# name: function
# key: f
# --
${1:type} ${2:Class}::${3:name}(${4:args})${5: const}
{
        $0
}####$$$$ yasnippet-snippets-master\c++-mode/fun_declaration
# -*- mode: snippet -*-
# name: fun_declaration
# key: f
# --
${1:type} ${2:name}(${3:args})${4: const};####$$$$ yasnippet-snippets-master\c++-mode/gtest
# -*- mode: snippet -*-
# name: gtest
# key: gtest
# group: testing
# --
#include <gtest/gtest.h>####$$$$ yasnippet-snippets-master\c++-mode/ignore
# -*- mode: snippet -*-
# name: ignore
# key: ignore
# --
${1:std::}cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');####$$$$ yasnippet-snippets-master\c++-mode/inline
# -*- mode: snippet -*-
# name: inline
# key: il
# --
inline $0####$$$$ yasnippet-snippets-master\c++-mode/io
# -*- mode: snippet -*-
# name: io
# key: io
# --
#include <iostream>####$$$$ yasnippet-snippets-master\c++-mode/iterator
# -*- mode: snippet -*-
# name: iterator
# key: iter
# --
${1:std::}${2:vector<int>}::iterator ${3:iter};
####$$$$ yasnippet-snippets-master\c++-mode/map
# -*- mode: snippet -*-
# name: map
# key: map
# --
std::map<${1:type1}$0> ${2:var};####$$$$ yasnippet-snippets-master\c++-mode/module
# -*- mode: snippet -*-
# name: module
# key: mod
# --
class ${1:Class} : public cSimpleModule
{
   $0
}####$$$$ yasnippet-snippets-master\c++-mode/namespace
# -*- mode: snippet -*-
# name: namespace
# key: ns
# --
namespace ${1:Namespace} {

          `yas/selected-text`

}  // $1####$$$$ yasnippet-snippets-master\c++-mode/ns
#name : namespace ...
# key: ns
# --
namespace ####$$$$ yasnippet-snippets-master\c++-mode/operator!=
# -*- mode: snippet -*-
# name: operator!=
# key: !=
# group: operator overloading
# --
bool ${1:MyClass}::operator!=(const $1 &other) const
{
    return !(*this == other);
}####$$$$ yasnippet-snippets-master\c++-mode/operator+
# -*- mode: snippet -*-
# name: operator+
# key: +
# group: operator overloading
# --
${1:MyClass} $1::operator+(const $1 &other)
{
    $1 result = *this;
    result += other;
    return result;
}####$$$$ yasnippet-snippets-master\c++-mode/operator+=
# -*- mode: snippet -*-
# name: operator+=
# key: +=
# group: operator overloading
# --
${1:MyClass}& $1::operator+=(${2:const $1 &rhs})
{
  $0
  return *this;
}####$$$$ yasnippet-snippets-master\c++-mode/operator=
# -*- mode: snippet -*-
# name: operator=
# key: =
# where this is a reference to myself
# group: operator overloading
# --
${1:MyClass}& $1::operator=(const $1 &rhs)
{
    // Check for self-assignment!
    if (this == &rhs)
      return *this;
    $0
    return *this;
}####$$$$ yasnippet-snippets-master\c++-mode/operator==
# -*- mode: snippet -*-
# name: operator==
# key: ==
# group: operator overloading
# --
bool ${1:MyClass}::operator==(const $1 &other) const
{
     $0
}####$$$$ yasnippet-snippets-master\c++-mode/operator[]
# -*- mode: snippet -*-
# name: operator[]
# key: []
# group: operator overloading
# --
${1:Type}& operator[](${2:int index})
{
        $0
}####$$$$ yasnippet-snippets-master\c++-mode/operator_istream
# -*- mode: snippet -*-
# name: operator>>
# key: >>
# group: operator overloading
# --
std::istream& operator>>(std::istream& is, const ${1:Class}& ${2:c})
{
         $0
	 return is;
}####$$$$ yasnippet-snippets-master\c++-mode/operator_ostream
# -*- mode: snippet -*-
# name: operator<<
# key: <<
# group: operator overloading
# --
std::ostream& operator<<(std::ostream& os, const ${1:Class}& ${2:c})
{
         $0
         return os;
}####$$$$ yasnippet-snippets-master\c++-mode/ostream
# -*- mode: snippet -*-
# name: ostream
# key: os
# --
#include <ostream>####$$$$ yasnippet-snippets-master\c++-mode/pack
# -*- mode: snippet -*-
# name: pack
# key: pack
# --
void cNetCommBuffer::pack(${1:type})
{

}

$0####$$$$ yasnippet-snippets-master\c++-mode/private
# -*- mode: snippet -*-
# name: private
# key: pr
# --
private:
        $0####$$$$ yasnippet-snippets-master\c++-mode/protected
# -*- mode: snippet -*-
# name: protected
# key: pt
# --
protected:
        $0####$$$$ yasnippet-snippets-master\c++-mode/public
# -*- mode: snippet -*-
# name: public
# key: pb
# --
public:
        $0####$$$$ yasnippet-snippets-master\c++-mode/sstream
# -*- mode: snippet -*-
# name: <sstream>
# key: ss
# --
#include <sstream>####$$$$ yasnippet-snippets-master\c++-mode/std
# -*- mode: snippet -*-
# name: std
# key: std
# --
using namespace std;####$$$$ yasnippet-snippets-master\c++-mode/std_colon
# -*- mode: snippet -*-
# name: std::
# key: st
# --
std::$0####$$$$ yasnippet-snippets-master\c++-mode/str
# -*- mode: snippet -*-
# name: str
# key: str
# --
#include <string>####$$$$ yasnippet-snippets-master\c++-mode/template
# -*- mode: snippet -*-
# name: template
# key: temp
# --
template<${1:$$(yas/choose-value '("typename" "class"))} ${2:T}>
$0####$$$$ yasnippet-snippets-master\c++-mode/test case
# -*- mode: snippet -*-
# name: test case
# key: tc
# group: testing
# --
BOOST_AUTO_TEST_CASE( ${1:test_case} )
{
        $0
}####$$$$ yasnippet-snippets-master\c++-mode/test_main
# -*- mode: snippet -*-
# name: test_main
# key: test_main
# group: testing
# --
int main(int argc, char **argv)
{
      ::testing::InitGoogleTest(&argc, argv);
       return RUN_ALL_TESTS();
}####$$$$ yasnippet-snippets-master\c++-mode/test_suite
# -*- mode: snippet -*-
# name: test_suite
# key: ts
# group: testing
# --
BOOST_AUTO_TEST_SUITE( ${1:test_suite1} )

$0

BOOST_AUTO_TEST_SUITE_END()####$$$$ yasnippet-snippets-master\c++-mode/this
# -*- mode: snippet -*-
# name: this
# key: th
# --
this####$$$$ yasnippet-snippets-master\c++-mode/throw
# -*- mode: snippet -*-
# name: throw
# key: throw
# --
throw ${1:MyError}($0);####$$$$ yasnippet-snippets-master\c++-mode/try
# -*- mode: snippet -*-
# name: try
# key: try
# a bit too intrusive now still, not always I want to do this
# --
try {
    $0
} catch (${1:type}) {

}
####$$$$ yasnippet-snippets-master\c++-mode/tryw
# -*- mode: snippet -*-
# name: tryw
# key: tryw
# --
try {
    `(or yas/selected-text (car kill-ring))`
} catch ${1:Exception} {

}
####$$$$ yasnippet-snippets-master\c++-mode/using
#name : using namespace ... 
# key: using
# --
using namespace ${std};
$0####$$$$ yasnippet-snippets-master\c++-mode/vector
# -*- mode: snippet -*-
# name: vector
# key: vec
# --
std::vector<${1:Class}> ${2:var}${3:(${4:10}, $1($5))};####$$$$ yasnippet-snippets-master\c-mode/.yas-parents
cc-mode
####$$$$ yasnippet-snippets-master\c-mode/assert
# -*- mode: snippet -*-
# name: assert
# key: ass
# --
#include <assert.h>
$0####$$$$ yasnippet-snippets-master\c-mode/compile
# -*- mode: snippet -*-
# name: compile
# key: compile
# --
// -*- compile-command: "${1:gcc -Wall -o ${2:dest} ${3:file}}" -*-####$$$$ yasnippet-snippets-master\c-mode/define
# -*- mode: snippet -*-
# name: define
# key: d
# --
#define $0####$$$$ yasnippet-snippets-master\c-mode/fopen
#name : FILE *fp = fopen(..., ...);
# key: fopen
# --
FILE *${fp} = fopen(${"file"}, "${r}");####$$$$ yasnippet-snippets-master\c-mode/malloc
# -*- mode: snippet -*-
# name: malloc
# key: malloc
# --
malloc(sizeof($1)${2: * ${3:3}});
$0####$$$$ yasnippet-snippets-master\c-mode/packed
# -*- mode: snippet -*-
# name: packed
# key: packed
# --
__attribute__((__packed__))$0####$$$$ yasnippet-snippets-master\c-mode/printf
# -*- mode: snippet -*-
# name: printf
# key: pr
# --
printf("${1:format string}"${2: ,a0,a1});####$$$$ yasnippet-snippets-master\c-mode/stdio
# -*- mode: snippet -*-
# name: stdio
# key: io
# --
#include <stdio.h>####$$$$ yasnippet-snippets-master\c-mode/stdlib
# -*- mode: snippet -*-
# name: stdlib
# key: std
# --
#include <stdlib.h>
####$$$$ yasnippet-snippets-master\c-mode/string
# -*- mode: snippet -*-
# name: string
# key: str
# --
#include <string.h>####$$$$ yasnippet-snippets-master\c-mode/union
# -*- mode: snippet -*-
# name: union
# key: union
# --
typedef union {
        $0
} ${1:name};####$$$$ yasnippet-snippets-master\c-mode/unistd
# -*- mode: snippet -*-
# name: unistd
# key: uni
# --
#include <unistd.h>####$$$$ yasnippet-snippets-master\cc-mode/case
# -*- mode: snippet -*-
# name : case : {...}
# key: case
# --
`(indent-region (- (point) 20) (+ (point) 20) nil)`case ${2:constexpr}:${3: \{}
    $0
    break;
${3:$(if (string-match "\{" yas-text) "\}" "")}####$$$$ yasnippet-snippets-master\cc-mode/do
#name : do { ... } while (...)
# key: do
# --
do
{
    $0
} while (${1:condition});####$$$$ yasnippet-snippets-master\cc-mode/else
# -*- mode: snippet -*-
# name : else { ... }
# key: else
# --
else${1: {
    $0
}}####$$$$ yasnippet-snippets-master\cc-mode/fopen
# -*- mode: snippet -*-
# name: FILE *fp = fopen(..., ...);
# key: fopen
# --
FILE *${fp} = fopen(${"file"}, "${r}");####$$$$ yasnippet-snippets-master\cc-mode/for
# -*- mode: snippet -*-
# name: for
# key: for
# --
for (${1:i = 0}; ${2:i < N}; ${3:i++}) {
    $0
}
####$$$$ yasnippet-snippets-master\cc-mode/for_n
# -*- mode: snippet -*-
# contributor: York Zhao
# name: for_n
# key: forn
# --
for (${1:auto }${2:i} = ${3:0}; $2 < ${4:MAXIMUM}; ++$2) {
    $0
}
####$$$$ yasnippet-snippets-master\cc-mode/if
# -*- mode: snippet -*-
# name : if (...) { ... }
# key: if
# --
if (${1:condition}) ${2:{
    $0
}}####$$$$ yasnippet-snippets-master\cc-mode/ifdef
# -*- mode: snippet -*-
# name: ifdef
# key: ifdef
# --
#ifdef ${1:MACRO}

$0

#endif // $1####$$$$ yasnippet-snippets-master\cc-mode/inc
# -*- mode: snippet -*-
# name : #include <...>
# key  : inc
# --
#include <$1>####$$$$ yasnippet-snippets-master\cc-mode/inc.1
# -*- mode: snippet -*-
# name : #include "..."
# key  : inc
# --
#include "$1"####$$$$ yasnippet-snippets-master\cc-mode/main
# -*- mode: snippet -*-
# name: main
# key: main
# --
int main(${1:int argc, char *argv[]})
{
    $0
    return 0;
}
####$$$$ yasnippet-snippets-master\cc-mode/math
# -*- mode: snippet -*-
# name: math
# key: math
# --
#include <math.h>
$0####$$$$ yasnippet-snippets-master\cc-mode/once
#name : #ifndef XXX; #define XXX; #endif
# key: once
# --
#ifndef ${1:`(upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))`_H}
#define $1

$0

#endif /* $1 */####$$$$ yasnippet-snippets-master\cc-mode/printf
# -*- mode: snippet -*-
# name: printf
# key: printf
# --
printf("${1:%s}\\n"${1:$(if (string-match "%" yas-text) ", " "\);")
}$2${1:$(if (string-match "%" yas-text) "\);" "")}####$$$$ yasnippet-snippets-master\cc-mode/struct
#name : struct ... { ... }
# key: struct
# --
struct ${1:name}
{
    $0
};####$$$$ yasnippet-snippets-master\cc-mode/switch
# -*- mode: snippet -*-
# name : switch (...) { case : ... default: ...}
# key: switch
# --
switch (${1:expr}) {
case ${2:constexpr}:${3: \{}
    $0
    break;
${3:$(if (string-match "\{" yas-text) "\}\n" "")}default:
    break;
}####$$$$ yasnippet-snippets-master\cc-mode/ternary
# -*- mode: snippet -*-
# name: ternary
# key: ?
# --
(${1:cond}) ? ${2:then} : ${3:else};####$$$$ yasnippet-snippets-master\cc-mode/typedef
# -*- mode: snippet -*-
# name: typedef
# key: typedef
# --
typedef ${1:type} ${2:alias};####$$$$ yasnippet-snippets-master\cc-mode/while
# -*- mode: snippet -*-
# name: while
# key: while
# --
while (${1:condition}) {
      $0
}####$$$$ yasnippet-snippets-master\clojure-mode/.yas-parents
prog-mode
####$$$$ yasnippet-snippets-master\clojure-mode/bench
# name: bench
# key: bench
# --
(dotimes [_ 5 ]$>
  (time (dotimes [i 1000000]$>
  $0$>
  )))$>####$$$$ yasnippet-snippets-master\clojure-mode/bp
# name: bp
# key: bp
# --
(swank.core/break)
####$$$$ yasnippet-snippets-master\clojure-mode/def
# name: def
# key: def
# --
(def $0)
####$$$$ yasnippet-snippets-master\clojure-mode/defm
# name: defmacro
# key: defm
# --
(defmacro $1
  "$2"$>
  [$3]$>
  $0)$>
####$$$$ yasnippet-snippets-master\clojure-mode/defn
# name: defn
# key: defn
# --
(defn $1
  "$2"$>
  [$3]$>
  $0)$>
####$$$$ yasnippet-snippets-master\clojure-mode/defr
# name: defrecord
# key: defr
# --
(defrecord
  ^{"$1"}$>
  $2$>
  [$3]$>
  $0)$>
####$$$$ yasnippet-snippets-master\clojure-mode/deft
# name: deftype
# key: deft
# --
(deftype
  ^{"$1"}$>
  $2$>
  [$3]$>
  $0)$>####$$$$ yasnippet-snippets-master\clojure-mode/doseq
# name: doseq
# key: doseq
# --
(doseq [$1 $2]
  $3)$>
$0####$$$$ yasnippet-snippets-master\clojure-mode/fn
# name: fn
# key: fn
# --
(fn [$1]
  $0)$>
####$$$$ yasnippet-snippets-master\clojure-mode/for
# name: for
# key: for
# --
(for [$1 $2]
  $3)$>
####$$$$ yasnippet-snippets-master\clojure-mode/if
# -*- coding: utf-8 -*-
# name: if
# key: if
# --
(if $1
  $2$>
  $3)$>
$0
####$$$$ yasnippet-snippets-master\clojure-mode/ifl
# -*- coding: utf-8 -*-
# name: ifl
# key: ifl
# --
(if-let [$1 $2]
  $3)$>
$0####$$$$ yasnippet-snippets-master\clojure-mode/import
# name: import
# key: import
# --
(:import ($1))$>####$$$$ yasnippet-snippets-master\clojure-mode/is
# -*- coding: utf-8 -*-
# name: is
# key: is
# --
(is (= $1 $2))
####$$$$ yasnippet-snippets-master\clojure-mode/let
# -*- coding: utf-8 -*-
# name: let
# key: let
# --
(let [$1 $2]$>
  $3)$>
$0
####$$$$ yasnippet-snippets-master\clojure-mode/map
# -*- coding: utf-8 -*-
# name: map
# key: map
# --
(map $1 $2)####$$$$ yasnippet-snippets-master\clojure-mode/map.lambda
# -*- coding: utf-8 -*-
# name: map lambda
# key: map
# --
(map #($1) $2)$>####$$$$ yasnippet-snippets-master\clojure-mode/mdoc
# -*- coding: utf-8 -*-
# name: mdoc
# key: mdoc
# --
^{:doc "$1"}####$$$$ yasnippet-snippets-master\clojure-mode/ns
# -*- coding: utf-8 -*-
# name: ns
# key: ns
# --
(ns `(flet ((try-src-prefix
	  (path src-pfx)
	  (let ((parts (split-string path src-pfx)))
	    (if (= 2 (length parts))
		(second parts)
	      nil))))
    (let* ((p (buffer-file-name))
           (p2 (first
		(remove-if-not '(lambda (x) x)
			       (mapcar
				'(lambda (pfx)
				   (try-src-prefix p pfx))
				'("/src/cljs/" "/src/clj/" "/src/")))))
	   (p3 (file-name-sans-extension p2))
	   (p4 (mapconcat '(lambda (x) x)
		 (split-string p3 "/")
		 ".")))
      (replace-regexp-in-string "_" "-" p4)))`)####$$$$ yasnippet-snippets-master\clojure-mode/opts
# key: opts
# name: opts
# --
{:keys [$1]$>
 :or {$2}$>
 :as $3}$>####$$$$ yasnippet-snippets-master\clojure-mode/pr
# -*- coding: utf-8 -*-
# name: pr
# key: pr
# --
(prn $1)
$0####$$$$ yasnippet-snippets-master\clojure-mode/print
# -*- coding: utf-8 -*-
# name: print
# key: print
# --
(println $1)
$0####$$$$ yasnippet-snippets-master\clojure-mode/reduce
# -*- coding: utf-8 -*-
# name: reduce
# key: reduce
# --
(reduce ${1:(fn [p n] $0)} $2)
####$$$$ yasnippet-snippets-master\clojure-mode/require
# name: require
# key: require
# --
(:require [$1 :as $2])$>####$$$$ yasnippet-snippets-master\clojure-mode/test
# name: test
# key: test
# --
(deftest $1
  (is (= $2))$>
  $0)$>
####$$$$ yasnippet-snippets-master\clojure-mode/try
# name: try
# key: try
# --
(try
$1$>
(catch ${2:Exception} e$>
$3$>))$>####$$$$ yasnippet-snippets-master\clojure-mode/use
# name: use
# key: use
# --
(:use [$1 :refer [$2]])$>####$$$$ yasnippet-snippets-master\clojure-mode/when
# -*- coding: utf-8 -*-
# name: when
# key: when
# --
(when $1
      $2)$>
$0$>
####$$$$ yasnippet-snippets-master\clojure-mode/whenl
# -*- coding: utf-8 -*-
# name: whenl
# key: whenl
# --
(when-let [$1 $2]
  $3)$>
  $0$>####$$$$ yasnippet-snippets-master\cmake-mode/add_executable
# -*- mode: snippet -*-
# name: add_executable
# key: exe
# --
add_executable($1 ${2:main.cpp})
target_link_libraries($1 $3)####$$$$ yasnippet-snippets-master\cmake-mode/add_library
# -*- mode: snippet -*-
# name: add_library
# key: lib
# --
add_library($1 ${2:class.cpp})
target_link_libraries($1 $3)####$$$$ yasnippet-snippets-master\cmake-mode/cmake_minimum_required
# -*- mode: snippet -*-
# name: cmake_minimum_required
# key: min
# --
cmake_minimum_required(VERSION ${1:2.6})####$$$$ yasnippet-snippets-master\cmake-mode/foreach
# -*- mode: snippet -*-
# name: foreach
# key: for
# --
foreach(${1:item} \${${2:array}})
        $0
endforeach()####$$$$ yasnippet-snippets-master\cmake-mode/function
# -*- mode: snippet -*-
# name: function
# key: fun
# --
function (${1:name})
         $0
endfunction()####$$$$ yasnippet-snippets-master\cmake-mode/if
# -*- mode: snippet -*-
# name: if
# key: if
# --
if(${1:cond})
   $0
endif()####$$$$ yasnippet-snippets-master\cmake-mode/ifelse
# -*- mode: snippet -*-
# name: ifelse
# key: if
# --
if(${1:cond})
        $2
else(${3:cond})
        $0
endif()####$$$$ yasnippet-snippets-master\cmake-mode/include
# type: command
# key: inc
# name: include
# --
include ($0)
####$$$$ yasnippet-snippets-master\cmake-mode/macro
# -*- mode: snippet -*-
# name: macro
# key: macro
# --
macro(${1:name}${2: args})

endmacro()####$$$$ yasnippet-snippets-master\cmake-mode/message
# -*- mode: snippet -*-
# name: message
# key: msg
# --
message(${1:STATUS }"$0")####$$$$ yasnippet-snippets-master\cmake-mode/option
# -*- mode: snippet -*-
# name: option
# key: opt
# --
option (${1:OPT} "${2:docstring}" ${3:value})####$$$$ yasnippet-snippets-master\cmake-mode/project
# -*- mode: snippet -*-
# name: project
# key: proj
# --
project ($0)####$$$$ yasnippet-snippets-master\cmake-mode/set
# -*- mode: snippet -*-
# name: set
# key: set
# --
set(${1:var} ${2:value})####$$$$ yasnippet-snippets-master\cpp-omnet-mode/emit_signal
# -*- mode: snippet -*-
# name: emit_signal
# key: emit
# --
emit(${1:signal_id}, ${2:long});####$$$$ yasnippet-snippets-master\cpp-omnet-mode/EV
# -*- mode: snippet -*-
# name: EV
# key: ev
# --
EV << "${1:string}"$0;####$$$$ yasnippet-snippets-master\cpp-omnet-mode/intuniform
# -*- mode: snippet -*-
# name: intuniform
# key: intuni
# --
intuniform(${1:0}, ${2:1})####$$$$ yasnippet-snippets-master\cpp-omnet-mode/math
# -*- mode: snippet -*-
# name: math
# key: math
# --
#include <cmath>####$$$$ yasnippet-snippets-master\cpp-omnet-mode/nan
# -*- mode: snippet -*-
# name: nan
# key: nan
# --
isnan(${1:x})####$$$$ yasnippet-snippets-master\cpp-omnet-mode/omnet
# -*- mode: snippet -*-
# name: omnet
# key: omnet
# --
#include <omnetpp.h>####$$$$ yasnippet-snippets-master\cpp-omnet-mode/parameter_omnetpp
# -*- mode: snippet -*-
# name: parameter_omnetpp
# key: par
# --
${1:var} = par("${2:par}");####$$$$ yasnippet-snippets-master\cpp-omnet-mode/scheduleAt
# -*- mode: snippet -*-
# name: scheduleAt
# key: sched
# --
scheduleAt(simTime()+${1:1.0}, ${2:event});####$$$$ yasnippet-snippets-master\cpp-omnet-mode/uniform
# -*- mode: snippet -*-
# name: uniform
# key: uni
# uniform distribution
# --
uniform(${1:0}, ${2:1})####$$$$ yasnippet-snippets-master\erlang-mode/after
#name : after ... ->
# --
after
    $1 -> $0
####$$$$ yasnippet-snippets-master\erlang-mode/begin
#name : begin ... end
# --
begin
    $0
end
####$$$$ yasnippet-snippets-master\erlang-mode/beh
#name : -behaviour(...).
# --
-behaviour(${1:gen_server}).
$0
####$$$$ yasnippet-snippets-master\erlang-mode/case
#name : case ... of ... end
# --
case $1 of
    $0
end
####$$$$ yasnippet-snippets-master\erlang-mode/compile
#name : -compile(...).
# --
-compile([${1:export_all}]).
$0
####$$$$ yasnippet-snippets-master\erlang-mode/def
#name : -define(...,...).
# --
-define($1,$2).
$0
####$$$$ yasnippet-snippets-master\erlang-mode/exp
#name : -export([]).
#contributor : hitesh <hitesh.jasani@gmail.com>
# --
-export([${1:start/0}]).
$0
####$$$$ yasnippet-snippets-master\erlang-mode/fun
#name : fun (...) -> ... end
# --
fun ($1) -> $0 end
####$$$$ yasnippet-snippets-master\erlang-mode/if
#name : if ... -> ... ; true -> ... end
# --
if
    $1 -> $2;
    true -> $0
end
####$$$$ yasnippet-snippets-master\erlang-mode/ifdef
#name : -ifdef(...). ... -endif.
# --
-ifdef($1).
$0
-endif.
####$$$$ yasnippet-snippets-master\erlang-mode/ifndef
#name : -ifndef(...). ... -endif.
# --
-ifndef($1).
$0
-endif.
####$$$$ yasnippet-snippets-master\erlang-mode/imp
#name : -import([]).
#contributor : hitesh <hitesh.jasani@gmail.com>
# --
-import(${1:lists}, [${2:map/2, sum/1}]).
$0
####$$$$ yasnippet-snippets-master\erlang-mode/inc
#name : -include("...").
# --
-include("$1").
$0
####$$$$ yasnippet-snippets-master\erlang-mode/inc.lib
#name : -include_lib("...").
# --
-include_lib("$1").
$0
####$$$$ yasnippet-snippets-master\erlang-mode/loop
#name : loop(...) -> receive _ -> loop(...) end.
# --
${1:loop}($2) ->
    receive
	${3:_} ->
	    $1($2)
    end.
$0
####$$$$ yasnippet-snippets-master\erlang-mode/mod
#name : -module().
#contributor : hitesh <hitesh.jasani@gmail.com>
# --
-module(${1:`(file-name-nondirectory
              (file-name-sans-extension (or (buffer-file-name) (buffer-name))))`}).
$0
####$$$$ yasnippet-snippets-master\erlang-mode/rcv
#name : receive ... -> ... end
# --
receive
    $1 -> $0
end
####$$$$ yasnippet-snippets-master\erlang-mode/rcv.after
#name : receive after ... -> ... end
# --
receive
after
    $1 -> $0
end
####$$$$ yasnippet-snippets-master\erlang-mode/rec
#name : -record(...,{...}).
# --
-record($1,{$2}).
$0
####$$$$ yasnippet-snippets-master\erlang-mode/try
#name : try ... of ... catch after end
# --
try $1 of
    $0
catch
after
end
####$$$$ yasnippet-snippets-master\erlang-mode/undef
#name : -undef(...).
# --
-undef($1).
$0
####$$$$ yasnippet-snippets-master\go-mode/benchmark
# -*- mode: snippet -*-
# name: benchmark
# key: bench
# contributor : @atotto
# --
func Benchmark$1(b *testing.B) {
	for i := 0; i < b.N; i++ {
		$0
	}
}
####$$$$ yasnippet-snippets-master\go-mode/const
# -*- mode:snippet -*-
# name: const
# key: const
# --
const ${1:name type} = ${2:val}
$0####$$$$ yasnippet-snippets-master\go-mode/const(
# -*- mode:snippet -*-
# name: const (...)
# key: const
# --
const (
  ${1:name type} = ${2:val}
)####$$$$ yasnippet-snippets-master\go-mode/dd
# -*- mode: snippet -*-
# name: debug fmt.Printf
# key: dd
# --
fmt.Printf("%+v\n", $1) // output for debug
$0####$$$$ yasnippet-snippets-master\go-mode/default
# -*- mode: snippet -*-
# name: default
# key: def
# --
default:
$0####$$$$ yasnippet-snippets-master\go-mode/else
# -*- mode: snippet -*-
# name: else
# key: el
# --
 else {
  $0
}####$$$$ yasnippet-snippets-master\go-mode/error
# -*- mode: snippet -*-
# name: error
# key: err
# contributor : @atotto
# --
if err != nil {
	$0
}####$$$$ yasnippet-snippets-master\go-mode/example
# -*- mode: snippet -*-
# name: example
# key: example
# contributor : @atotto
# --
func Example$1() {
	$0
}
####$$$$ yasnippet-snippets-master\go-mode/for
# -*- mode:snippet -*-
# name: for
# key: for
# --
for $1 {
  $0
}
####$$$$ yasnippet-snippets-master\go-mode/forrange
# -*- mode: snippet -*-
# name: for range
# key: range
# contributor : @atotto
# --
for ${3:key}, ${2:value} := range ${1:target} {
	$0
}####$$$$ yasnippet-snippets-master\go-mode/func
# -*- mode: snippet -*-
# name: func
# key: func
# --
//
func ${1:name}(${2:args}) $3 {
  $0
}####$$$$ yasnippet-snippets-master\go-mode/if
# -*- mode: snippet -*-
# name: if
# key: if
# --
if $1 {
  $0
}####$$$$ yasnippet-snippets-master\go-mode/iferr
# -*- mode: snippet -*-
# name: if error
# key: iferr
# --
if err != $1 {
  $0
}
####$$$$ yasnippet-snippets-master\go-mode/import
# -*- mode:snippet -*-
# name: import
# key: imp
# --
import "$1"
$0####$$$$ yasnippet-snippets-master\go-mode/import(
# -*- mode:snippet -*-
# name: import (...)
# key: imp
# --
import (
  "$0"
)
####$$$$ yasnippet-snippets-master\go-mode/lambda
# -*- mode: snippet -*-
# name: lambda func
# key: lambda
# --
func(${1:args}) $2 {
  $0
}()####$$$$ yasnippet-snippets-master\go-mode/main
# -*- mode: snippet -*-
# name: func main()
# key: main
# --
func main() {
  $0
}####$$$$ yasnippet-snippets-master\go-mode/map
# -*- mode: snippet -*-
# name: map
# key: map
# --
map[${1:type}]${2:type}
####$$$$ yasnippet-snippets-master\go-mode/printf
# -*- mode: snippet -*-
# name: fmt.Printf(...)
# key: pr
# --
fmt.Printf("${1:%s}\n", ${2:args})
$0####$$$$ yasnippet-snippets-master\go-mode/select
# -*- mode: snippet -*-
# name: select
# key: sel
# --
select {
case $1:
  $0
}####$$$$ yasnippet-snippets-master\go-mode/switch
# -*- mode: snippet -*-
# name: switch
# key: sw
# --
switch $1 {
case $2:
  $0
}####$$$$ yasnippet-snippets-master\go-mode/test
# -*- mode: snippet -*-
# name: test
# key: at
# contributor : @atotto
# --
func Test$1(t *testing.T) {
	$0
}
####$$$$ yasnippet-snippets-master\go-mode/testmain
# -*- mode: snippet -*-
# name: testmain
# key: testmain
# contributor : @atotto
# --
func TestMain(m *testing.M) {
	setup()
	ret := m.Run()
	if ret == 0 {
		teardown()
	}
	os.Exit(ret)
}

func setup() {
	$1
}

func teardown() {
	$2
}####$$$$ yasnippet-snippets-master\go-mode/type
# -*- mode: snippet -*-
# name: type
# key: type
# --
type $1 $2 {
  $0
}####$$$$ yasnippet-snippets-master\go-mode/var
# -*- mode: snippet -*-
# name: var
# key: var
# --
var ${1:name} ${2:type}
$0####$$$$ yasnippet-snippets-master\go-mode/var(
# -*- mode: snippet -*-
# name: var (...)
# key: var
# --
var (
  ${1:name} ${2:type}
)####$$$$ yasnippet-snippets-master\html-mode/.yas-parents
nxml-mode
####$$$$ yasnippet-snippets-master\html-mode/dd
#contributor : Rodrigo Setti <rodrigosetti@gmail.com>
#name : <dd> ... </dd>
#group : list
# --
<dd>$1</dd>####$$$$ yasnippet-snippets-master\html-mode/dl
#contributor : Rodrigo Setti <rodrigosetti@gmail.com>
#name : <dl> ... </dl>
#group : list
# --
<dl>
    $0
</dl>
####$$$$ yasnippet-snippets-master\html-mode/doctype
#name : Doctype HTML 4.01 Strict
#group : meta
# --
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">####$$$$ yasnippet-snippets-master\html-mode/doctype.xhml1
#name : DocType XHTML 1.0 frameset
#group : meta
# --
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">####$$$$ yasnippet-snippets-master\html-mode/doctype.xhtml1_1
#name : DocType XHTML 1.1
#group : meta
# --
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">####$$$$ yasnippet-snippets-master\html-mode/doctype.xhtml1_strict
#name : DocType XHTML 1.0 Strict
#group : meta
# --
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">####$$$$ yasnippet-snippets-master\html-mode/doctype.xhtml1_transitional
#name : DocType XHTML 1.0 Transitional
#group : meta
# --
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">####$$$$ yasnippet-snippets-master\html-mode/dt
#contributor : Rodrigo Setti <rodrigosetti@gmail.com>
#name : <dt> ... </dt>
#group : list
# --
<dt>$1</dt>####$$$$ yasnippet-snippets-master\html-mode/form
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name :<form method="..." id="..." action="..."></form>
# --
<form method="$1" id="$2" action="$3">
  $0
</form>####$$$$ yasnippet-snippets-master\html-mode/html
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name : <html>...</html>
# --
<html>
  $0
</html>
####$$$$ yasnippet-snippets-master\html-mode/html.xmlns
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name : <html xmlns="...">...</html>
# --
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="${1:en}" lang="${2:en}">
  $0
</html>
####$$$$ yasnippet-snippets-master\html-mode/link.stylesheet
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name : <link stylesheet="..." />
# --
<link rel="${1:stylesheet}" href="${2:url}" type="${3:text/css}" media="${4:screen}" />####$$$$ yasnippet-snippets-master\html-mode/link.stylesheet-ie
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name : <!--[if IE]><link stylesheet="..." /><![endif]-->
# --
<!--[if IE]>
<link rel="${1:stylesheet}" href="${2:url}" type="${3:text/css}" media="${4:screen}" />
<![endif]-->####$$$$ yasnippet-snippets-master\html-mode/mailto
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name : <a href="mailto:...@...">...</a>
# --
<a href="mailto:$1@$2">$0</a>####$$$$ yasnippet-snippets-master\html-mode/meta
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#group : meta
#name : <meta name="..." content="..." />
# --
<meta name="${1:generator}" content="${2:content}" />####$$$$ yasnippet-snippets-master\html-mode/meta.http-equiv
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name : <meta http-equiv="..." content="..." />
#group : meta
# --
<meta http-equiv="${1:Content-Type}" content="${2:text/html; charset=UTF-8}" />
####$$$$ yasnippet-snippets-master\html-mode/script.javascript
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name :<script type="text/javascript">...</script> 
# --
<script type="text/javascript">
  $0
</script>####$$$$ yasnippet-snippets-master\html-mode/script.javascript-src
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name :<script type="text/javascript" src="..."></script> 
# --
<script type="text/javascript" src="$1"></script>####$$$$ yasnippet-snippets-master\html-mode/textarea
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name : <textarea ...></textarea>
# --
<textarea name="$1" id="$2" rows="$3" cols="$4" tabindex="$5"></textarea>####$$$$ yasnippet-snippets-master\html-mode/th
#contributor : Jimmy Wu <frozenthrone88@gmail.com>
#name : <th>...</th>
#group : table
# --
<th$1>$2</th>####$$$$ yasnippet-snippets-master\java-mode/apr_assert
# -*- mode: snippet -*-
# name: apr_assert
# key: apr_assert
# --
if (Globals.useAssertions) {
   ${1:assert ..};
}
####$$$$ yasnippet-snippets-master\java-mode/assert
# -*- mode: snippet; require-final-newline: nil -*-
# name: assert
# key: as
# --
assert ${1:expression};####$$$$ yasnippet-snippets-master\java-mode/assertEquals
# -*- mode: snippet; require-final-newline: nil -*-
# name: assertEquals
# key: ae
# group: test
# --
Assert.assertEquals($1, $2);
$0####$$$$ yasnippet-snippets-master\java-mode/cls
# -*- mode: snippet -*-
# name: cls
# key: cls
# --
class ${1:Class} {
      $0
}####$$$$ yasnippet-snippets-master\java-mode/constructor
# -*- mode: snippet; require-final-newline: nil -*-
# name: constructor
# key: c
# --
public ${1:Class} (${2:args}) {
       $0
}####$$$$ yasnippet-snippets-master\java-mode/define test method
# -*- mode: snippet; require-final-newline: nil -*-
# name: define test method
# key: dt
# --
@Test
public void test${1:Name}() throws Exception {
    $0
}
####$$$$ yasnippet-snippets-master\java-mode/doc
# -*- mode: snippet -*-
# name: doc
# key: /*
# --
/**
 * ${1:documentation}
 */####$$$$ yasnippet-snippets-master\java-mode/equals
# -*- mode: snippet -*-
# name: equals
# key: eq
# --
public boolean equals(${1:Class} other) {
       $0
}####$$$$ yasnippet-snippets-master\java-mode/file_class
# -*- mode: snippet -*-
# name: file_class
# key: file
# --
public class ${1:`(file-name-base
                    (or (buffer-file-name)
                        (buffer-name)))`} {
  $0
}
####$$$$ yasnippet-snippets-master\java-mode/for
# -*- mode: snippet -*-
# name: for
# key: for
# --
for (${1:int i = 0}; ${2:i < N}; ${3:i++}) {
    $0
}####$$$$ yasnippet-snippets-master\java-mode/fori
# -*- mode: snippet -*-
# name: fori
# key: fori
# --
for (${1:Object el} : ${2:iterator}) {
    $0
}
####$$$$ yasnippet-snippets-master\java-mode/getter
# -*- mode: snippet; require-final-newline: nil -*-
# name: getter
# key: g
# --
public ${1:int} get${2:Field}() {
       return ${3:field};
}####$$$$ yasnippet-snippets-master\java-mode/if
# -*- mode: snippet -*-
# name: if
# key: if
# --
if (${1:condition}) {
   $0
}####$$$$ yasnippet-snippets-master\java-mode/ife
# -*- mode: snippet -*-
# name: ife
# key: ife
# --
if (${1:cond}) {
    $2
}
else {
     $3
}####$$$$ yasnippet-snippets-master\java-mode/import
# -*- mode: snippet -*-
# name: import
# key: imp
# --
import ${1:System.};
$0####$$$$ yasnippet-snippets-master\java-mode/iterator
# -*- mode: snippet -*-
# name: iterator
# key: iterator
# --
public Iterator<${1:type}> iterator() {
       $0
}
####$$$$ yasnippet-snippets-master\java-mode/javadoc
# -*- mode: snippet -*-
# name: javadoc
# key: doc
# --
/**
 * $0
 *
 */####$$$$ yasnippet-snippets-master\java-mode/lambda
# -*- mode: snippet; require-final-newline: nil -*-
# name: lambda
# key: \
# --
(${1:args}) -> ${2:expression};####$$$$ yasnippet-snippets-master\java-mode/main
# -*- mode: snippet -*-
# name: main
# key: main
# --
public static void main(String[] args) {
       $0
}####$$$$ yasnippet-snippets-master\java-mode/main_class
# contributor: L. Guruprasad <lgp171188@gmail.com>
# name: main_class
# key: main_class
# --
class `(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`
{
public static void main(String args[])
{
$0
}
}####$$$$ yasnippet-snippets-master\java-mode/method
# -*- mode: snippet; require-final-newline: nil -*-
# name: method
# key: m
# --
${1:public} ${2:void} ${3:name}(${4:args}) {
            $0
}####$$$$ yasnippet-snippets-master\java-mode/new
# -*- mode: snippet -*-
# name: new
# key: new
# --
${1:Type} ${2:obj} = new ${3:Constr}(${4:args});
$0####$$$$ yasnippet-snippets-master\java-mode/override
# -*- mode: snippet; require-final-newline: nil -*-
# name: override
# key: o
# --
@Override
$0####$$$$ yasnippet-snippets-master\java-mode/param
# -*- mode: snippet -*-
# name: param
# key: param
# --
@param ${1:paramater} $0####$$$$ yasnippet-snippets-master\java-mode/printf
# -*- mode: snippet -*-
# name: printf
# key: printf
# --
System.out.printf("$0%n");####$$$$ yasnippet-snippets-master\java-mode/println
# -*- mode: snippet -*-
# name: println
# key: pr
# --
System.out.println("${1:text}");
$0####$$$$ yasnippet-snippets-master\java-mode/return
# -*- mode: snippet; require-final-newline: nil -*-
# name: return
# key: r
# --
return $0####$$$$ yasnippet-snippets-master\java-mode/test
# -*- mode: snippet -*-
# name: test
# key: test
# --
@Test
public void test_${1:Case}() {
       $0
}####$$$$ yasnippet-snippets-master\java-mode/testClass
# -*- mode: snippet -*-
# name: testClass
# key: tc
# --
import junit.framework.*;
import junit.textui.*;

public class Test${1:Class} extends TestCase {
       protected void setUp() {
                 $0
       }
}####$$$$ yasnippet-snippets-master\java-mode/this
# -*- mode: snippet; require-final-newline: nil -*-
# name: this
# key: .
# --
this.$1 = $1;
$0####$$$$ yasnippet-snippets-master\java-mode/toString
# -*- mode: snippet -*-
# name: toString
# key: toStr
# --
public String toString() {
       $0
}####$$$$ yasnippet-snippets-master\java-mode/try
# -*- mode: snippet -*-
# name: try
# key: try
# --
try {
    $0
}
catch (${1:Throwable e}) {
      ${2:System.out.println("Error " + e.getMessage());
      e.printStackTrace();}
}
####$$$$ yasnippet-snippets-master\java-mode/value
# -*- mode: snippet; require-final-newline: nil -*-
# name: value
# key: val
# --
final ${1:int} ${2:n} = $0;####$$$$ yasnippet-snippets-master\latex-mode/acronym
# -*- mode: snippet -*-
# name: acronym
# key: ac
# --
\newacronym{${1:label}}{${1:$(upcase yas-text)}}{${2:Name}}####$$$$ yasnippet-snippets-master\latex-mode/alertblock
# -*- mode: snippet -*-
# name: alertblock
# key: al
# --
\begin{alertblock}{$2}
        $0
\end{alertblock}####$$$$ yasnippet-snippets-master\latex-mode/alg
# -*- mode: snippet -*-
# name: alg
# key: alg
# --
\begin{algorithmic}
$0
\end{algorithmic}
####$$$$ yasnippet-snippets-master\latex-mode/begin
# -*- mode: snippet -*-
# name: begin
# key: begin
# --
\begin{${1:environment}}
$0
\end{$1}####$$$$ yasnippet-snippets-master\latex-mode/block
# -*- mode: snippet -*-
# name: block
# key: bl
# --
\begin{block}{$1}
        $0
\end{block}####$$$$ yasnippet-snippets-master\latex-mode/capgls
# -*- mode: snippet -*-
# name: Gls
# key: G
# --
\Gls{${1:label}}####$$$$ yasnippet-snippets-master\latex-mode/caption
# -*- mode: snippet -*-
# name: caption
# key: ca
# --
\caption{$0}####$$$$ yasnippet-snippets-master\latex-mode/cite
# -*- mode: snippet -*-
# name: cite
# key: c
# --
\cite{$1} $0####$$$$ yasnippet-snippets-master\latex-mode/code
# -*- mode: snippet -*-
# name: code
# key: code
# --
\begin{lstlisting}
$0
\end{lstlisting}####$$$$ yasnippet-snippets-master\latex-mode/columns
# -*- mode: snippet -*-
# name: columns
# key: cols
# --
\begin{columns}
  \begin{column}{.${1:5}\textwidth}
  $0
  \end{column}

  \begin{column}{.${2:5}\textwidth}

  \end{column}
\end{columns}####$$$$ yasnippet-snippets-master\latex-mode/emph
# -*- mode: snippet -*-
# name: emph
# key: e
# --
\emph{$1}$0####$$$$ yasnippet-snippets-master\latex-mode/figure
# -*- mode: snippet -*-
# name: figure
# key: fig
# --
\begin{figure}[ht]
  \centering
  \includegraphics[${1:options}]{figures/${2:path.pdf}}
  \caption{\label{fig:${3:label}} $0}
\end{figure}
####$$$$ yasnippet-snippets-master\latex-mode/frac
# -*- mode: snippet -*-
# name: frac
# key: frac
# --
\frac{${1:numerator}}{${2:denominator}}$0####$$$$ yasnippet-snippets-master\latex-mode/frame
# -*- mode: snippet -*-
# name: frame
# key: fr
# --
\begin{frame}${1:[$2]}
        ${3:\frametitle{$4}}
        $0
\end{frame}####$$$$ yasnippet-snippets-master\latex-mode/gls
# -*- mode: snippet -*-
# name: gls
# key: g
# --
\gls{${1:label}}####$$$$ yasnippet-snippets-master\latex-mode/glspl
# -*- mode: snippet -*-
# name: glspl
# key: gp
# --
\glspl{${1:label}}####$$$$ yasnippet-snippets-master\latex-mode/if
# -*- mode: snippet -*-
# name: if
# key: if
# --
\IF {$${1:cond}$}
    $0
\ELSE
\ENDIF 
####$$$$ yasnippet-snippets-master\latex-mode/includegraphics
# -*- mode: snippet -*-
# name: includegraphics
# key: ig
# --
\includegraphics${1:[$2]}{$0}####$$$$ yasnippet-snippets-master\latex-mode/item
# -*- mode: snippet -*-
# name: item
# key: -
# --
\item $0####$$$$ yasnippet-snippets-master\latex-mode/itemize
# -*- mode: snippet -*-
# name: itemize
# key: it
# --
\begin{itemize}
$0
\end{itemize}####$$$$ yasnippet-snippets-master\latex-mode/label
# -*- mode: snippet -*-
# name: label
# key: lab
# --
\label{$0}####$$$$ yasnippet-snippets-master\latex-mode/listing
# -*- mode: snippet -*-
# name: listing
# key: lst
# --
\begin{lstlisting}[float,label=lst:${1:label},caption=nextHopInfo: ${2:caption}]
$0
\end{lstlisting}####$$$$ yasnippet-snippets-master\latex-mode/movie
# -*- mode: snippet -*-
# name: movie
# key: movie
# --
\begin{center}
\includemovie[
  label=test,
  controls=false,
  text={\includegraphics[width=4in]{${1:image.pdf}}}
]{4in}{4in}{${2:video file}}

\movieref[rate=3]{test}{Play Fast}
\movieref[rate=1]{test}{Play Normal Speed} 
\movieref[rate=0.2]{test}{Play Slow}
\movieref[resume]{test}{Pause/Resume}
####$$$$ yasnippet-snippets-master\latex-mode/newcommand
# -*- mode: snippet -*-
# name: newcommand
# key: cmd
# --
\newcommand{\\${1:name}}${2:[${3:0}]}{$0}####$$$$ yasnippet-snippets-master\latex-mode/newglossaryentry
# -*- mode: snippet -*-
# name: newglossaryentry
# key: gl
# --
\newglossaryentry{${1:AC}}{name=${2:Andrea Crotti}${3:, description=${4:description}}}####$$$$ yasnippet-snippets-master\latex-mode/note
# -*- mode: snippet -*-
# name: note
# key: no
# --
\note{$0}####$$$$ yasnippet-snippets-master\latex-mode/python
# -*- mode: snippet -*-
# name: python
# key: py
# --
\lstset{language=python}
\begin[language=python]{lstlisting}
$0
\end{lstlisting}####$$$$ yasnippet-snippets-master\latex-mode/question
# -*- mode: snippet -*-
# name: question
# key: q
# --
\question{$0}####$$$$ yasnippet-snippets-master\latex-mode/section
# -*- mode: snippet -*-
# name: section
# key: sec
# --
\section{${1:name}}
\label{sec:${2:label}}

$0####$$$$ yasnippet-snippets-master\latex-mode/subf
# -*- mode: snippet -*-
# name: subf
# key: sf
# --
\subfigure[${1:caption}]{
  \label{fig:${2:label}} 
  \includegraphics[width=.${3:3}\textwidth]{${4:path}}}
$0####$$$$ yasnippet-snippets-master\latex-mode/subfigure
# -*- mode: snippet -*-
# name: subfigure
# key: subfig
# --
\begin{figure}[ht]
  \centering
  \subfigure[$1]
  {\label{fig:${2:label}} 
    \includegraphics[width=.${3:5}\textwidth]{${4:path}}}

  \caption{${5:caption}}
\label{fig:${6:label}}
\end{figure}
####$$$$ yasnippet-snippets-master\latex-mode/subsec
# -*- mode: snippet -*-
# name: subsec
# key: sub
# --
\subsection{${1:name}}
\label{subsec:${2:label}}

$0####$$$$ yasnippet-snippets-master\latex-mode/textbf
# -*- mode: snippet -*-
# name: textbf
# key: b
# --
\textbf{$1}$0####$$$$ yasnippet-snippets-master\latex-mode/usepackage
# -*- mode: snippet -*-
# name: usepackage
# key: pkg
# --
\usepackage{$0}####$$$$ yasnippet-snippets-master\lisp-mode/class
# -*- mode: snippet -*-
# name: class
# key: cls
# --
(defclass ${1:name} (${2:inherits})
   (${4:slot})
   (:documentation "${3:doc}"))
$0
####$$$$ yasnippet-snippets-master\lisp-mode/comment
# -*- mode: snippet -*-
# name: comment
# key: /*
# --
#|${1:type the comment here}|#
$0
####$$$$ yasnippet-snippets-master\lisp-mode/defpackage
# -*- mode: snippet -*-
# name: defpackage
# key: defp
# --
(defpackage #:${1:name}
   (:nicknames #:${2:nick})
   (:use #:cl #:closer-mop #:${3:package})
   (:shadow :${4.symbol})
   (:shadowing-import-from #:${5:package} #:${6:symbol})
   (:export :$0))
####$$$$ yasnippet-snippets-master\lisp-mode/do
# -*- mode: snippet -*-
# name: do
# key: do
# --
(do ((${1:var1} ${2:init-form} ${3:step-form})
     (${4:var2} ${5:init-form} ${6:step-form}))  
    (${7:condition} ${8:return-value})
    (${9:body}))
$0
####$$$$ yasnippet-snippets-master\lisp-mode/for
# -*- mode: snippet -*-
# name: do
# key: for
# --
(dotimes (${1:var} ${2:count-form})
         ${3:body})
$0
####$$$$ yasnippet-snippets-master\lisp-mode/foreach
# -*- mode: snippet -*-
# name: do
# key: foreach
# --
(dolist (${1:var} ${2:list-form})
        ${3:body})
$0
####$$$$ yasnippet-snippets-master\lisp-mode/format
# -*- mode: snippet -*-
# name: format
# key: print
# --
(format t "~& $0 ~%")
####$$$$ yasnippet-snippets-master\lisp-mode/if
# -*- mode: snippet -*-
# name: if
# key: if
# --
(when (${1:condition})
      (${2:then-do-this}))
$0
####$$$$ yasnippet-snippets-master\lisp-mode/ifelse
# -*- mode: snippet -*-
# name: ifelse (...) (...) (...) ...
# key: ifelse
# --

(if (${1:condition})
    (${2:then})
    (${3:else}))
$0
####$$$$ yasnippet-snippets-master\lisp-mode/ifnot
# -*- mode: snippet -*-
# name: ifnot (...) (...)  ...
# key: ifnot
# --

(unless (${1:condition})
        (${2:then-do-this}))
$0
####$$$$ yasnippet-snippets-master\lisp-mode/slot
# -*- mode: snippet -*-
# name: slot
# key: slot
# --
(${1:name} :initarg :${1:$(yas/substr yas-text "[^: ]*")}
           :initform (error ":${1:$(yas/substr yas-text "[^: ]*")} must be specified")
           ;; :accessor ${1:$(yas/substr yas-text "[^: ]*")}
           :reader ${1:$(yas/substr yas-text "[^: ]*")}-changed
           :writer set-${1:$(yas/substr yas-text "[^: ]*")}
           :type
           :allocation ${3::class :instance}
           :documentation "${2:about-slot}")
$0
####$$$$ yasnippet-snippets-master\lisp-mode/switch
# -*- mode: snippet -*-
# name: switch
# key: switch
# --

(cond (${1:case1} (${2:do-this}))
      (${3:case2} (${4:do-this}))     
      (t ${5:default}))
$0
####$$$$ yasnippet-snippets-master\lisp-mode/typecast
# -*- mode: snippet -*-
# name: typecast
# name: cast
# --
(coerce ${1:object} ${2:type})
$0
####$$$$ yasnippet-snippets-master\lua-mode/fun
# -*- mode: snippet -*-
# name: fun
# key: fun
# --
function ()
         ${1:return something}
end####$$$$ yasnippet-snippets-master\markdown-mode/+
#name : Unordered List
#contributor: Peng Deng <dengpeng@gmail.com>
# --
+ ${1:Text}
+$0
####$$$$ yasnippet-snippets-master\markdown-mode/-
#name : Unordered List
#contributor: Peng Deng <dengpeng@gmail.com>
# --
- ${1:Text}
-$0
####$$$$ yasnippet-snippets-master\markdown-mode/h1.1
#name : Header 1 (#)
#contributor: Peng Deng <dengpeng@gmail.com>
# --
# ${1:Header 1} #

$0
####$$$$ yasnippet-snippets-master\markdown-mode/h1.2
#name : Header 1 (=)
#contributor: Peng Deng <dengpeng@gmail.com>
# --
${1:Header 1}
${1:$(make-string (string-width yas-text) ?\=)}

$0
####$$$$ yasnippet-snippets-master\markdown-mode/h2.1
#name : Header 2 (##)
#contributor: Peng Deng <dengpeng@gmail.com>
# --
## ${1:Header 1} ##

$0
####$$$$ yasnippet-snippets-master\markdown-mode/h2.2
#name : Header 2 (-)
#contributor: Peng Deng <dengpeng@gmail.com>
# --
${1:Header 2}
${1:$(make-string (string-width yas-text) ?\-)}

$0
####$$$$ yasnippet-snippets-master\markdown-mode/h3
#name : Header 3
#contributor: Peng Deng <dengpeng@gmail.com>
# --
### ${1:Header 3} ###

$0
####$$$$ yasnippet-snippets-master\markdown-mode/h4
#name : Header 4
#contributor: Peng Deng <dengpeng@gmail.com>
# --
#### ${1:Header 4} ####

$0
####$$$$ yasnippet-snippets-master\markdown-mode/h5
#name : Header 5
#contributor: Peng Deng <dengpeng@gmail.com>
# --
##### ${1:Header 5} #####

$0
####$$$$ yasnippet-snippets-master\markdown-mode/h6
#name : Header 6
#contributor: Peng Deng <dengpeng@gmail.com>
# --
###### ${1:Header 6} ######

$0
####$$$$ yasnippet-snippets-master\markdown-mode/hr.1
#name : Horizontal Rule (-)
#contributor: Peng Deng <dengpeng@gmail.com>
# --

----------

$0
####$$$$ yasnippet-snippets-master\markdown-mode/hr.2
#name : Horizontal Rule (*)
#contributor: Peng Deng <dengpeng@gmail.com>
# --

*******

$0
####$$$$ yasnippet-snippets-master\markdown-mode/img
#name : Image
#contributor: Peng Deng <dengpeng@gmail.com>
# --
![${1:Alt Text}](${2:URL} $3) $0
####$$$$ yasnippet-snippets-master\markdown-mode/link
#name : Link
#contributor: Peng Deng <dengpeng@gmail.com>
# --
[${1:Link Text}](${2:URL} $3) $0
####$$$$ yasnippet-snippets-master\markdown-mode/ol
#name : Ordered List
#contributor: Peng Deng <dengpeng@gmail.com>
# --
${1:1}. ${2:Text}
${1:$(number-to-string (1+ (string-to-number yas-text)))}. $0
####$$$$ yasnippet-snippets-master\markdown-mode/rimg
#name : Referenced Image
#contributor: Peng Deng <dengpeng@gmail.com>
# --
![${1:Alt Text}][$2] $0
####$$$$ yasnippet-snippets-master\markdown-mode/rlb
#name : Reference Label
#contributor: Peng Deng <dengpeng@gmail.com>
# --
[${1:Reference}]: ${2:URL} $3
$0
####$$$$ yasnippet-snippets-master\markdown-mode/rlink
#name : Reference Link
#contributor: Peng Deng <dengpeng@gmail.com>
# --
[${1:Link Text}][$2] $0
####$$$$ yasnippet-snippets-master\markdown-mode/utf8
# name: utf-8 encoding
# key: utf8
# contributor: Thiago Perrotta
# --
<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
$0
####$$$$ yasnippet-snippets-master\markdown-mode/_
#name : Emphasis
#contributor: Peng Deng <dengpeng@gmail.com>
# --
_${1:Text}_ $0
####$$$$ yasnippet-snippets-master\markdown-mode/__
#name : Strong
#contributor: Peng Deng <dengpeng@gmail.com>
# --
**${1:Text}** $0
####$$$$ yasnippet-snippets-master\markdown-mode/`
#name : Inline Code
#contributor: Peng Deng <dengpeng@gmail.com>
# --
\`${1:Code}\` $0
####$$$$ yasnippet-snippets-master\org-mode/code
# -*- mode: snippet -*-
# name: code
# key: code_
# --
#+begin_${1:lang} ${2:options}
$0
#+end_$1####$$$$ yasnippet-snippets-master\org-mode/dot
# -*- mode: snippet -*-
# name: dot
# key: dot_
# --
#+begin_src dot :file ${1:file} :cmdline -T${2:pdf} :exports none :results silent
            $0
#+end_src

[[file:$1]]####$$$$ yasnippet-snippets-master\org-mode/elisp
# -*- mode: snippet -*-
# name: elisp
# key: elisp_
# --
#+begin_src emacs-lisp :tangle yes
$0
#+end_src####$$$$ yasnippet-snippets-master\org-mode/embedded
# -*- mode: snippet -*-
# name: embedded
# key: emb_
# --
src_${1:lang}${2:[${3:where}]}{${4:code}}####$$$$ yasnippet-snippets-master\org-mode/entry
# -*- mode: snippet -*-
# name: entry
# key: entry_
# --
#+begin_html
---
layout: ${1:default}
title: ${2:title}
---
#+end_html
$0####$$$$ yasnippet-snippets-master\org-mode/figure
# -*- mode: snippet -*-
# name: figure
# key: fig_
# --
#+CAPTION: ${1:caption}
#+ATTR_LaTeX: ${2:scale=0.75}
#+LABEL: fig:${3:label}
####$$$$ yasnippet-snippets-master\org-mode/img
# -*- mode: snippet -*-
# name: img
# key: img_
# --
<img src="$1"
 alt="$2" align="${3:left}"
 title="${4:image title}"
 class="img"
</img>
$0####$$$$ yasnippet-snippets-master\org-mode/latex
# -*- mode: snippet -*-
# name: latex
# key: latex_
# --
#+BEGIN_LaTeX
$0
#+END_LaTeX####$$$$ yasnippet-snippets-master\org-mode/matrix
# -*- mode: snippet -*-
# name: matrix
# key: matrix_
# possible improvement, compute the number of lines from the argument to array
# --
\left \(
\begin{array}{${1:ccc}}
${2:v1 & v2} \\
$0
\end{array}
\right \)####$$$$ yasnippet-snippets-master\org-mode/verse
# -*- mode: snippet -*-
# name: verse
# key: verse_
# --
#+begin_verse
        $0
#+end_verse####$$$$ yasnippet-snippets-master\python-mode/.yas-parents
prog-mode
####$$$$ yasnippet-snippets-master\python-mode/.yas-setup.el
(defun python-split-args (arg-string)
  "Split a python argument string into ((name, default)..) tuples"
  (mapcar (lambda (x)
             (split-string x "[[:blank:]]*=[[:blank:]]*" t))
          (split-string arg-string "[[:blank:]]*,[[:blank:]]*" t)))

(defun python-args-to-docstring ()
  "return docstring format for the python arguments in yas-text"
  (let* ((indent (concat "\n" (make-string (current-column) 32)))
         (args (python-split-args yas-text))
         (max-len (if args (apply 'max (mapcar (lambda (x) (length (nth 0 x))) args)) 0))
         (formatted-args (mapconcat
                (lambda (x)
                   (concat (nth 0 x) (make-string (- max-len (length (nth 0 x))) ? ) " -- "
                           (if (nth 1 x) (concat "\(default " (nth 1 x) "\)"))))
                args
                indent)))
    (unless (string= formatted-args "")
      (mapconcat 'identity (list "Keyword Arguments:" formatted-args) indent))))

(add-hook 'python-mode-hook
          '(lambda () (set (make-local-variable 'yas-indent-line) 'fixed)))
####$$$$ yasnippet-snippets-master\python-mode/all
# -*- mode: snippet -*-
# name: all
# key: a
# --
__all__ = [
    $0
]####$$$$ yasnippet-snippets-master\python-mode/arg
# -*- mode: snippet -*-
# name: arg
# key: arg
# group: argparser
# --
parser.add_argument('-$1', '--$2',
                    $0)
####$$$$ yasnippet-snippets-master\python-mode/arg_positional
# -*- mode: snippet -*-
# name: arg_positional
# key: arg
# group: argparser
# --
parser.add_argument('${1:varname}', $0)####$$$$ yasnippet-snippets-master\python-mode/ass
# -*- mode: snippet -*-
# name: assert
# key: ass
# group: testing
# --
assert $0####$$$$ yasnippet-snippets-master\python-mode/assertEqual
# -*- mode: snippet -*-
# name: assertEqual
# key: ae
# group: testing
# --
self.assertEqual($1, $2)####$$$$ yasnippet-snippets-master\python-mode/assertFalse
# -*- mode: snippet -*-
# name: assertFalse
# key: af
# group: testing
# --
self.assertFalse($0)####$$$$ yasnippet-snippets-master\python-mode/assertIn
# -*- mode: snippet -*-
# name: assertIn
# key: ai
# group: testing
# --
self.assertIn(${1:member}, ${2:container})####$$$$ yasnippet-snippets-master\python-mode/assertNotEqual
# -*- mode: snippet -*-
# name: assertNotEqual
# key: ane
# group: testing
# --
self.assertNotEqual($1, $2)####$$$$ yasnippet-snippets-master\python-mode/assertRaises
# -*- mode: snippet -*-
# name: assertRaises
# key: ar
# group: testing
# --
self.assertRaises(${1:Exception}, ${2:fun})####$$$$ yasnippet-snippets-master\python-mode/assertRaises.with
# -*- mode: snippet -*-
# name: assertRaises
# key: ar
# --
with self.assertRaises(${1:Exception}):
    $0
####$$$$ yasnippet-snippets-master\python-mode/assertTrue
# -*- mode: snippet -*-
# name: assertTrue
# key: at
# group: testing
# --
self.assertTrue($0)####$$$$ yasnippet-snippets-master\python-mode/assetNotIn
# -*- mode: snippet -*-
# name: assetNotIn
# key: an
# group: testing
# --
self.assertNotIn(${1:member}, ${2:container})####$$$$ yasnippet-snippets-master\python-mode/celery_pdb
# -*- mode: snippet -*-
# name: celery pdb
# key: cdb
# group: debug
# --
from celery.contrib import rdb; rdb.set_trace()####$$$$ yasnippet-snippets-master\python-mode/classmethod
# -*- mode: snippet -*-
# name: classmethod
# key: cm
# group: object oriented
# --
@classmethod
def ${1:meth}(cls, $0):
    ####$$$$ yasnippet-snippets-master\python-mode/cls
# -*- mode: snippet -*-
# name: cls
# key: cls
# group: object oriented
# --
class ${1:class}:
    $0
####$$$$ yasnippet-snippets-master\python-mode/dec
# -*- mode: snippet -*-
# name: dec
# key: dec
# group : definitions
# --
def ${1:decorator}(func):
    $2
    def _$1(*args, **kwargs):
        $3
        ret = func(*args, **kwargs)
        $4
        return ret

    return _$1####$$$$ yasnippet-snippets-master\python-mode/deftest
# -*- mode: snippet -*-
# name: deftest
# key: dt
# group: testing
# --
def test_${1:long_name}(self):
    $0####$$$$ yasnippet-snippets-master\python-mode/django_test_class
# -*- mode: snippet; require-final-newline: nil -*-
# name: django_test_class
# key: tcs
# group: testing
# --
class ${1:Model}Test(TestCase):
    $0####$$$$ yasnippet-snippets-master\python-mode/doc
# -*- mode: snippet -*-
# name: doc
# key: d
# --
"""$0
"""####$$$$ yasnippet-snippets-master\python-mode/doctest
# -*- mode: snippet -*-
# name: doctest
# key: doc
# group: testing
# --
>>> ${1:function calls}
${2:desired output}
$0####$$$$ yasnippet-snippets-master\python-mode/eq
# -*- mode: snippet -*-
# name: __eq__
# key: eq
# group: dunder methods
# --
def __eq__(self, other):
    return self.$1 == other.$1####$$$$ yasnippet-snippets-master\python-mode/for
# name: for ... in ... : ...
# key: for
# group : control structure
# --
for ${var} in ${collection}:
    $0####$$$$ yasnippet-snippets-master\python-mode/from
# -*- mode: snippet -*-
# name: from
# key: from
# group : general
# --
from ${1:lib} import ${2:funs}####$$$$ yasnippet-snippets-master\python-mode/function
# -*- mode: snippet -*-
# name: function
# key: f
# group: definitions
# --
def ${1:fun}(${2:args}):
    $0
####$$$$ yasnippet-snippets-master\python-mode/function_docstring
# -*- mode: snippet -*-
# name: function_docstring
# key: fd
# group: definitions
# --
def ${1:name}($2):
    \"\"\"$3
    ${2:$(python-args-to-docstring)}
    \"\"\"
    $0####$$$$ yasnippet-snippets-master\python-mode/if
# -*- mode: snippet -*-
# name: if
# key: if
# group : control structure
# --
if ${1:cond}:
    $0
####$$$$ yasnippet-snippets-master\python-mode/ife
# -*- mode: snippet -*-
# name: ife
# key: ife
# group : control structure
# --
if $1:
    $2
else:
    $0
####$$$$ yasnippet-snippets-master\python-mode/ifmain
# -*- mode: snippet -*-
# name: ifmain
# key: ifm
# --
if __name__ == '__main__':
    ${1:main()}####$$$$ yasnippet-snippets-master\python-mode/import
# -*- mode: snippet -*-
# name: import
# key: imp
# group : general
# --
import ${1:lib}${2: as ${3:alias}}
$0####$$$$ yasnippet-snippets-master\python-mode/init
# -*- mode: snippet -*-
# name: init
# key: init
# group : definitions
# --
def __init__(self${1:, args}):
    ${2:"${3:docstring}"
    }$0####$$$$ yasnippet-snippets-master\python-mode/init_docstring
# -*- mode: snippet -*-
# name: init_docstring
# key: id
# group : definitions
# --
def __init__(self$1):
    \"\"\"$2
    ${1:$(python-args-to-docstring)}
    \"\"\"
    $0####$$$$ yasnippet-snippets-master\python-mode/interact
# -*- mode: snippet -*-
# name: interact
# key: int
# --
import code; code.interact(local=locals())####$$$$ yasnippet-snippets-master\python-mode/ipdbdebug
# -*- mode: snippet; require-final-newline: nil -*-
# name: ipdb trace
# key: itr
# group: debug
# --
import ipdb; ipdb.set_trace()####$$$$ yasnippet-snippets-master\python-mode/iter
# -*- mode: snippet -*-
# name: __iter__
# key: iter
# group: dunder methods
# --
def __iter__(self):
    return ${1:iter($2)}####$$$$ yasnippet-snippets-master\python-mode/lambda
# -*- mode: snippet -*-
# name: lambda
# key: lam
# --
lambda ${1:x}: $0####$$$$ yasnippet-snippets-master\python-mode/list
# -*- mode: snippet -*-
# name: list
# key: li
# group : definitions
# --
[${1:el} for $1 in ${2:list}]
$0####$$$$ yasnippet-snippets-master\python-mode/logger_name
# -*- mode: snippet -*-
# name: logger_name
# key: ln
# --
logger = logging.getLogger(${1:__name__})####$$$$ yasnippet-snippets-master\python-mode/logging
# -*- mode: snippet -*-
# name: logging
# key: log
# --
logger = logging.getLogger("${1:name}")
logger.setLevel(logging.${2:level})
####$$$$ yasnippet-snippets-master\python-mode/main
# -*- mode: snippet -*-
# name: main
# key: main
# --
def main():
    $0####$$$$ yasnippet-snippets-master\python-mode/metaclass
# -*- mode: snippet -*-
# name: metaclass
# key: mt
# group: object oriented
# --
__metaclass__ = type####$$$$ yasnippet-snippets-master\python-mode/method
# -*- mode: snippet -*-
# name: method
# key: m
# group: object oriented
# --
def ${1:method}(self${2:, $3}):
    $0####$$$$ yasnippet-snippets-master\python-mode/method_docstring
# -*- mode: snippet -*-
# name: method_docstring
# key: md
# group: object oriented
# --
def ${1:name}(self$2):
    \"\"\"$3
    ${2:$(python-args-to-docstring)}
    \"\"\"
    $0####$$$$ yasnippet-snippets-master\python-mode/not_impl
# -*- mode: snippet -*-
# name: not_impl
# key: not_impl
# --
raise NotImplementedError####$$$$ yasnippet-snippets-master\python-mode/np
# -*- mode: snippet -*-
# name: np
# key: np
# group : general
# --
import numpy as np
$0####$$$$ yasnippet-snippets-master\python-mode/parser
# -*- mode: snippet -*-
# name: parser
# key: pars
# group: argparser
# --
parser = argparse.ArgumentParser(description='$1')
$0####$$$$ yasnippet-snippets-master\python-mode/parse_args
# -*- mode: snippet -*-
# name: parse_args
# key: pargs
# group: argparser
# --
def parse_arguments():
    parser = argparse.ArgumentParser(description='$1')
    $0
    return parser.parse_args()####$$$$ yasnippet-snippets-master\python-mode/pass
# -*- mode: snippet -*-
# name: pass
# key: ps
# --
pass####$$$$ yasnippet-snippets-master\python-mode/print
# -*- mode: snippet -*-
# name: print
# key: p
# --
print($0)####$$$$ yasnippet-snippets-master\python-mode/prop
# contributor: Mads D. Kristensen <madsdk@gmail.com>
# name: prop
# --
def ${1:foo}():
    doc = """${2:Doc string}"""
    def fget(self):
        return self._$1

    def fset(self, value):
        self._$1 = value

    def fdel(self):
        del self._$1
    return locals()
$1 = property(**$1())

$0
####$$$$ yasnippet-snippets-master\python-mode/reg
# -*- mode: snippet -*-
# name: reg
# key: reg
# group : general
# --
${1:regexp} = re.compile(r"${2:expr}")
$0####$$$$ yasnippet-snippets-master\python-mode/repr
# -*- mode: snippet -*-
# name: __repr__
# key: repr
# group: dunder methods
# --
def __repr__(self):
    $0####$$$$ yasnippet-snippets-master\python-mode/return
# -*- mode: snippet -*-
# name: return
# key: r
# --
return $0####$$$$ yasnippet-snippets-master\python-mode/script
# -*- mode: snippet -*-
# name: script
# key: script
# --
#!/usr/bin/env python

def main():
    pass

if __name__ == '__main__':
    main()
####$$$$ yasnippet-snippets-master\python-mode/self
# -*- mode: snippet -*-
# name: self
# key: .
# group: object oriented
# --
self.$0####$$$$ yasnippet-snippets-master\python-mode/selfassign
# -*- mode: snippet -*-
# name: selfassign
# key: sn
# group: object oriented
# --
self.$1 = $1####$$$$ yasnippet-snippets-master\python-mode/self_without_dot
# -*- mode: snippet -*-
# name: self_without_dot
# key: s
# group: object oriented
# --
self####$$$$ yasnippet-snippets-master\python-mode/setdef
# -*- mode: snippet -*-
# name: setdef
# key: setdef
# --
${1:var}.setdefault(${2:key}, []).append(${3:value})####$$$$ yasnippet-snippets-master\python-mode/setup
# -*- mode: snippet -*-
# name: setup
# key: setup
# group: distribute
# --
from setuptools import setup

package = '${1:name}'
version = '${2:0.1}'

setup(name=package,
      version=version,
      description="${3:description}",
      url='${4:url}'$0)
####$$$$ yasnippet-snippets-master\python-mode/size
# -*- mode: snippet -*-
# name: size
# key: size
# --
sys.getsizeof($0)####$$$$ yasnippet-snippets-master\python-mode/static
# -*- mode: snippet -*-
# name: static
# key: sm
# --
@staticmethod
def ${1:func}($0):
####$$$$ yasnippet-snippets-master\python-mode/str
# -*- mode: snippet -*-
# name: __str__
# key: str
# group: dunder methods
# --
def __str__(self):
    $0####$$$$ yasnippet-snippets-master\python-mode/super
# -*- mode: snippet -*-
# name: super
# key: super
# group: object oriented
# --
super(`(replace-regexp-in-string "\\([.]\\)[^.]+$" ", self)." (python-info-current-defun) nil nil 1)`($1)
$0####$$$$ yasnippet-snippets-master\python-mode/test_class
# -*- mode: snippet -*-
# name: test_class
# key: tcs
# group : testing
# --
class Test${1:toTest}(${2:unittest.TestCase}):
    $0
####$$$$ yasnippet-snippets-master\python-mode/test_file
# -*- mode: snippet -*-
# name: test_file
# key: tf
# group : testing
# --
import unittest
${1:from ${2:test_file} import *}

$0

if __name__ == '__main__':
    unittest.main()####$$$$ yasnippet-snippets-master\python-mode/trace
# -*- mode: snippet -*-
# name: trace
# key: tr
# group: debug
# --
import pdb; pdb.set_trace()####$$$$ yasnippet-snippets-master\python-mode/try
# -*- mode: snippet -*-
# name: try
# key: try
# --
try:
    $1
except ${2:Exception}:
    $0####$$$$ yasnippet-snippets-master\python-mode/tryelse
# -*- mode: snippet -*-
# name: tryelse
# key: try
# --
try:
    $1
except $2:
    $3
else:
    $0####$$$$ yasnippet-snippets-master\python-mode/unicode
# -*- mode: snippet -*-
# name: __unicode__
# key: un
# group: dunder methods
# --
def __unicode__(self):
    $0####$$$$ yasnippet-snippets-master\python-mode/utf8
# -*- mode: snippet -*-
# name: utf-8 encoding
# key: utf8
# --
# -*- coding: utf-8 -*-
####$$$$ yasnippet-snippets-master\python-mode/while
# -*- mode: snippet -*-
# name: while
# key: wh
# group: control structure
# --
while ${1:True}:
    $0####$$$$ yasnippet-snippets-master\python-mode/with
# -*- mode: snippet -*-
# name: with
# key: with
# group : control structure
# --
with ${1:expr}${2: as ${3:alias}}:
    $0####$$$$ yasnippet-snippets-master\python-mode/with_statement
# -*- mode: snippet -*-
# name: with_statement
# key: fw
# group: future
# --
from __future__ import with_statement####$$$$ yasnippet-snippets-master\python-mode/__contains__
# -*- mode: snippet -*-
# name: __contains__
# key: cont
# group: dunder methods
# --
def __contains__(self, el):
    $0####$$$$ yasnippet-snippets-master\python-mode/__enter__
# -*- mode: snippet -*-
# name: __enter__
# key: ent
# group: dunder methods
# --
def __enter__(self):
    $0

    return self####$$$$ yasnippet-snippets-master\python-mode/__exit__
# -*- mode: snippet -*-
# name: __exit__
# key: ex
# group: dunder methods
# --
def __exit__(self, type, value, traceback):
    $0####$$$$ yasnippet-snippets-master\python-mode/__getitem__
# -*- mode: snippet -*-
# name: __getitem__
# key: getit
# group: dunder methods
# --
def __getitem__(self, ${1:key}):
    $0####$$$$ yasnippet-snippets-master\python-mode/__len__
# -*- mode: snippet -*-
# name: __len__
# key: len
# group: dunder methods
# --
def __len__(self):
    $0####$$$$ yasnippet-snippets-master\python-mode/__new__
# -*- mode: snippet -*-
# name: __new__
# key: new
# group: dunder methods
# --
def __new__(mcs, name, bases, dict):
    $0
    return type.__new__(mcs, name, bases, dict)
####$$$$ yasnippet-snippets-master\python-mode/__setitem__
# -*- mode: snippet -*-
# name: __setitem__
# key: setit
# group: dunder methods
# --
def __setitem__(self, ${1:key}, ${2:val}):
    $0####$$$$ yasnippet-snippets-master\sh-mode/args
# -*- mode: snippet -*-
# name:args
# key: args
# --
if [ $# -lt ${1:2} ]
   then $0
fi####$$$$ yasnippet-snippets-master\sh-mode/bang
# -*- mode: snippet -*-
# name: bang
# key: !
# --
#!/usr/bin/env bash
$0####$$$$ yasnippet-snippets-master\sh-mode/for loop
# -*- mode: snippet -*-
# name: for loop
# key: for
# --
for ${1:var} in ${2:stuff}; do
    $0
done####$$$$ yasnippet-snippets-master\sh-mode/function
# -*- mode: snippet -*-
# name: function
# key: f
# --
function ${1:name} {
         $0
}####$$$$ yasnippet-snippets-master\sh-mode/if
# -*- mode: snippet -*-
# name: if
# key: if
# --
if ${1:[ -f file]}
   then ${2:do}
fi
$0####$$$$ yasnippet-snippets-master\sh-mode/ife
# -*- mode: snippet -*-
# name: ife
# key: ife
# --
if ${1:cond}
then ${2:stuff}
else ${3:other}
fi
$0####$$$$ yasnippet-snippets-master\snippet-mode/cont
# -*- mode: snippet -*-
# name: cont
# key: cont
# --
# contributor: `user-full-name`####$$$$ yasnippet-snippets-master\snippet-mode/elisp
# -*- mode: snippet -*-
# name: elisp
# key: `
# --
\`$0\`####$$$$ yasnippet-snippets-master\snippet-mode/field
# name : ${ ...  } field
# contributor : joaotavora
# key : $f
# key: field
# --
\${${1:${2:n}:}$3${4:\$(${5:lisp-fn})}\}$0####$$$$ yasnippet-snippets-master\snippet-mode/group
# -*- mode: snippet -*-
# name: group
# key: group
# --
# group : ${1:group}####$$$$ yasnippet-snippets-master\snippet-mode/mirror
# name : ${n:$(...)} mirror
# key : $m
# contributor : joaotavora
# key: mirror
# --
\${${2:n}:${4:\$(${5:reflection-fn})}\}$0####$$$$ yasnippet-snippets-master\snippet-mode/vars
# -*- mode: snippet -*-
# name : Snippet header
# contributor : joaotavora
# key: vars
# --
# name : $1${2:
# key : ${3:trigger-key}}${4:
# keybinding : ${5:keybinding}}${6:
# expand-env : (${7:})}
# contributor : $6
# key: vars
# --
$0